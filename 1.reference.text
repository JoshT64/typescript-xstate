// //ts-ignore-file
// import {
//   AnyEventObject,
//   assign,
//   createMachine,
//   Event,
//   interpret,
//   SingleOrArray
// } from 'xstate'
// import { useMachine } from '@xstate/react'
// import Home from './Home/Home'
// import { useEffect, useRef } from 'react'
// import Login from './Login/Login'

// //ts-ignore-file
// //ignore typescript for file
// //ts-ignore-line

// export const promiseMachine = createMachine({
//   id: 'light',
//   initial: 'pending',
//   states: {
//     pending: {
//       on: {
//         ENTER: { target: 'resolved' },
//         EXIT: { target: 'rejected' }
//       }
//     },
//     failure: {
//       on: {
//         EXIT: { target: 'rejected' }
//       }
//     },
//     resolved: {
//       type: 'compound'
//     },
//     rejected: {
//       type: 'final'
//     }
//   }
// })

// export type Context = {
//   x: number
//   y: number
//   dx: number
//   dy: number
//   pointerx: number
//   pointery: number
// }

// const dragDropMachine = createMachine({
//   id: 'dragAndDrop',
//   initial: 'idle',
//   context: {
//     //pos of box
//     x: 596,
//     y: 193,
//     //how far from where you clicked
//     dx: 0, //how far on x we move
//     dy: 0, //how far on y we move
//     //where you clicked
//     pointerx: 0,
//     pointery: 0
//   },
//   states: {
//     idle: {
//       on: {
//         //event -> nextstate
//         mousedown: {
//           target: 'dragging',
//           //side effect here
//           actions: assign((context: object, event: MouseEvent) => {
//             return {
//               ...context,
//               pointerx: event.clientX,
//               pointery: event.clientY
//             }
//           })
//         }
//       }
//     },
//     dragging: {
//       on: {
//         mouseup: {
//           target: 'idle',
//           actions: assign((context: Context) => {
//             return {
//               ...context,
//               x: context.x + context.dx,
//               y: context.y + context.dy,
//               dx: 0,
//               dy: 0
//             }
//           })
//         },
//         mousemove: {
//           target: 'dragging',
//           actions: assign((context: Context, event: MouseEvent) => {
//             return {
//               ...context,
//               dx: event.clientX - context.pointerx,
//               dy: event.clientY - context.pointery
//             }
//           })
//         }
//       }
//     }
//   }
// })

// function App() {
//   const box = useRef<HTMLDivElement>(null)
//   const [state, send] = useMachine(promiseMachine)
//   const dragDropService = interpret(dragDropMachine)
//     .onTransition((state) => {
//       const currentBox = box.current
//       if (state.changed) {
//         currentBox?.style.setProperty(
//           'left',
//           state.context.x + state.context.dx + 'px'
//         )
//         currentBox?.style.setProperty(
//           'top',
//           state.context.y + state.context.dy + 'px'
//         )
//         console.log(state.context)
//       }
//     })
//     .start()

//   // eslint-disable-next-line @typescript-eslint/ban-types
//   const onBoxMouseUp = (e: SingleOrArray<Event<AnyEventObject>>) => {
//     dragDropService.send(e)
//   }
//   const onBoxMouseDown = (e: SingleOrArray<Event<AnyEventObject>>) => {
//     dragDropService.send(e)
//   }

//   const onBoxMouseMove = (e: SingleOrArray<Event<AnyEventObject>>) => {
//     dragDropService.send(e)
//   }

//   const Box = () => {
//     return (
//       <div
//         className="absolute  m-4 h-48 w-48  rounded-md bg-blue-300"
//         //send event to machine
//         // eslint-disable-next-line react/no-string-refs
//         ref={box}
//         onMouseDown={(e) => onBoxMouseDown(e)}
//         id="box"
//       ></div>
//     )
//   }

//   return (
//     <>
//       {state.matches('resolved') && <Home />}
//       {state.matches('pending') && <Login />}
//       {state.matches('rejected') && (
//         <div className="flex h-screen items-center justify-center">
//           <div
//             className="rounded bg-red-500 py-2 px-4 font-bold text-white hover:bg-red-700"
//             onClick={() => send('EXIT')}
//           >
//             Login Failed! Retry?
//           </div>
//         </div>
//       )}
//     </>
//   )
// }

// export default App
